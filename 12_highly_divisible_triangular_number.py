text = """Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

print(text)

import time

# go up to square root and remove by division from big number
def test_and_remove(my_num, ctr, primes):
  # handle 1 case
  if my_num == 1:
    return
  # handle 2 case
  if my_num%2 == 0:
    if primes == []:
      primes.append(list([ctr]))
    else:
      primes[-1].append(ctr)
    if my_num / 2 == 1: # last run for a power of two
      return
    else:
      test_and_remove(my_num / 2, 2, primes)
      return
  if ctr == 2:
    ctr += 1
  
  # handle non-2 case
  my_root = my_num ** (1/2.0)
  #print('test_and_remove(' + str(my_num) + ', ' + str(ctr) + ', ' + str(primes) + ')')
  
  while ctr <= int(my_root):
    #print('my_num: ' + str(my_num) + ', ctr: ' + str(ctr) + ', primes: ' + str(primes))
    if my_num % ctr == 0:
      if primes == []:
        primes.append(list([ctr]))
      elif ctr in primes[-1]:
        primes[-1].append(ctr)
      else:
        primes.append(list([ctr]))
      test_and_remove(my_num / ctr, ctr, primes)
      return
    
    ctr += 2
  
  # final call
  #print('final call')
  if primes == []:
    primes.append(list([my_num]))
  elif my_num in primes[-1]:
    primes[-1].append(my_num)
  else:
    primes.append(list([my_num]))
  return

#for i in range(20):
#  primes = []
#  test_and_remove(i+2,2,primes)
#  print(primes)

# Tn = n(n+1)/2 = p1^a1*...*pk^ak*q1^a(k+1)*...*q(m-k)^am
# prod(ai+1) from i=1 to m is the number of factors of Tn
# we want the first Tn where prod(ai+1) = 500 = 2^2*5^3
# gcd(n,n+1)=1, so 2<=m, and we can't have more items in the product than 5, so m<=5
# we get the smallest exponents when m=5, namely 1,1,4,4,4
# so Tn > 2*2*2^4*2^4*2^4. Solving for n gives n>180.5200..., thus n>=181.

start_time = time.clock()

n = 181
#n = 3
solved = False

while not solved:
  primes_n = []
  primes_n1 = []
  if n%2 == 0:
    test_and_remove(n/2, 2, primes_n)
    test_and_remove(n+1, 2, primes_n1)
  else:
    test_and_remove(n, 2, primes_n)
    test_and_remove((n+1)/2, 2, primes_n1)
  
  #print('n: ' + str(n) + ', primes_n: ' + str(primes_n) + ', primes_n1: ' + str(primes_n1))
  primes = []
  primes.extend(primes_n)
  primes.extend(primes_n1)
  #print('primes: ' + str(primes))
  
  num_factors = 1
  for prime in primes: # prime is a list like [3,3,3]
    num_factors *= len(prime) + 1
  #print('n: ' + str(n) + ' num_factors: ' + str(num_factors) + ' primes: ' + str(primes))
  #if num_factors == 6:
  if num_factors >= 500:
    solved = True
    Tn = n*(n+1)/2
  else:
    n += 1

end_time = time.clock()
runtime = end_time - start_time

print('=======')
print('ANSWER:')
print('=======')
print('found in ' + str(runtime) + ' seconds')
print('Tn: ' + str(Tn) + ', n: ' + str(n) + ', num_factors: ' + str(num_factors))
print('primes: ' + str(primes))




